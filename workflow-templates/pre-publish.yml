name: Pre Publish
# Before publishing package

on:
  workflow_call:
    inputs:
      TARGET_ENV:
        description: 'What environment are we targeting: staging, production, etc'
        required: true
        type: string
      TARGET_APP:
        description: 'The name of the app instance in heroku (i.e. grid-orchestrator-sandbox, grid-orchestrator-staging, grid-orchestrator)'
        required: true
        type: string

jobs:

  pre_publish_job:
    name: Pre Publish Job
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      BUMP_MAJOR: bump-major
      BUMP_MINOR: bump-minor
      BUMP_PATCH: bump-patch
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_API_TOKEN }}

      - name: Remove checked-in .npmrc
        run: rm .npmrc # We let the "actions/setup-node" setup the .npmrc globally

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18.12.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Get PR for push
        uses: 8BitJonny/gh-get-current-pr@3.0.0
        id: pr_info
        with:
          filterOutClosed: false
          filterOutDraft: true

      - name: Extract Bump Label
        id: bump_label_check
        run: |
          if [[ "${{ steps.pr_info.outputs.pr_labels }}" == *"${{ env.BUMP_PATCH }}"* ]]; then
            echo ::set-output name=bump_label::patch
          elif [[ "${{ steps.pr_info.outputs.pr_labels }}" == *"${{ env.BUMP_MINOR }}"* ]]; then
            echo ::set-output name=bump_label::minor
          elif [[ "${{ steps.pr_info.outputs.pr_labels }}" == *"${{ env.BUMP_MAJOR }}"* ]]; then
            echo ::set-output name=bump_label::major
          else
            echo ::set-output name=bump_label::patch
          fi 

      - name: Get latest published package version from npm registry # check if greater than 0
        id: latest_version
        run: |
          sudo apt-get install jq
          PACKAGE_NAME="$(jq -r '.name' src/package.json)"
          ARRAY_VERSIONS_JSON=$(npm view ${PACKAGE_NAME} versions --json) # Get all the versions in order in array
          ARRAY_LENGTH=$(echo $ARRAY_VERSIONS_JSON | jq length) 
          LATEST_VERSION="0.0.0"

          if [ $ARRAY_LENGTH -gt 0 ]; then
            LATEST_VERSION=$(echo $ARRAY_VERSIONS_JSON | jq last) # Get the last version in array
          fi 

          echo ::set-output name=number::${LATEST_VERSION}
          echo "The Current NPM Registry Package Version: ${LATEST_VERSION}"

      - name: Set the version number of "src/package.json" to latest from npm registry
        run: npm run set-version ${{ steps.latest_version.outputs.number }}
        working-directory: src/

      - name: Bump the "src/package.json" version number
        run: |
          if [[ "${{ steps.bump_label_check.outputs.bump_label }}" == *"patch"* ]]; then
            npm run bump-patch
          elif [[ "${{ steps.bump_label_check.outputs.bump_label }}" == *"minor"* ]]; then
            npm run bump-minor
          elif [[ "${{ steps.bump_label_check.outputs.bump_label }}" == *"major"* ]]; then
            npm run bump-major
          else
            npm run bump-patch
          fi 
        working-directory: src/

      - name: Set the "src/package-lock.json" version number
        run: npm run set-lock-version "$(jq -r '.version' package.json)"
        working-directory: src/

      - name: Bump the "src/package.json" build number
        run: npm run bump-build
        working-directory: src/

      - name: Set the "package.json" version number
        run: npm run set-version "$(jq -r '.version' src/package.json)"
        working-directory: ./

      - name: Set the "package-lock.json" version number
        run: npm run set-lock-version "$(jq -r '.version' src/package.json)"
        working-directory: ./

      - name: Set the "package.json" build number
        run: npm run set-build "$(jq -r '.build' src/package.json)"
        working-directory: ./

      - name: Set GitHub User
        run: |
          git config --global user.name "System Bot"
          git config --global user.email "${{ secrets.SYSTEM_EMAIL }}"

      - name: Git Push
        run: |
          echo "The user: ${{ github.actor }}"
          git add package.json
          git add package-lock.json
          git add src/package.json
          git add src/package-lock.json
          git commit -m "Version and Build bump by CI [skip ci]"
          git push
        working-directory: ./